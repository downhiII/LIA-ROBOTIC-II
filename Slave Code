// Include necessary libraries
#include <SPI.h>
#include <MFRC522.h>
#include <LiquidCrystal.h>
#include <Wire.h>

// Define pins for RFID reader
#define RST_PIN         9
#define SS_PIN          10

// Define I2C address for communication with master
#define SLAVE_ADDR      9

// Define pins for LCD display
const int rs = 7, en = 6, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);  // Create LCD object

// Create MFRC522 instance for RFID reader
MFRC522 mfrc522(SS_PIN, RST_PIN);

// Define access UIDs and corresponding messages
const byte accessUIDs[][4] = {
  {0x4A, 0xE3, 0xE8, 0x36},
  {0x96, 0x14, 0xE4, 0xAD},
  {0x83, 0x28, 0x27, 0x0E},
  // Add more UIDs here
};

const char* accessMessages[] = {
  "Kenny",
  "Joseph",
  "Jayden",
  // Add more messages corresponding to the UIDs here
};

void setup() {
  Serial.begin(9600);  // Initialize serial communication
  while (!Serial);     // Wait if no serial port is opened (for boards like ATMEGA32U4)
  SPI.begin();         // Initialize SPI bus
  mfrc522.PCD_Init();  // Initialize RFID reader
  delay(4);            // Optional delay for some boards to be ready after init
  mfrc522.PCD_DumpVersionToSerial();  // Print RFID reader details

  // Set up the LCD's number of columns and rows
  lcd.begin(16, 2);
  lcd.print("Hello");  // Print a welcome message to the LCD
}

void loop() {
  lcd.setCursor(0, 1);
  lcd.print("                 ");  // Clear previous message on the LCD

  // Check if a new card is present
  if (!mfrc522.PICC_IsNewCardPresent()) {
    return;  // If no new card, exit loop
  }

  // Read the card's UID
  if (!mfrc522.PICC_ReadCardSerial()) {
    return;  // If unable to read the card, exit loop
  }

  int Access = 0;  // Default to no access

  // Check if the scanned UID matches any access UID
  for (int i = 0; i < sizeof(accessUIDs) / sizeof(accessUIDs[0]); i++) {
    if (memcmp(mfrc522.uid.uidByte, accessUIDs[i], 4) == 0) {
      Access = i + 1;  // Grant access if UID matches
      break;
    }
  }

  // Display access message on the LCD
  if (Access > 0) {
    lcd.setCursor(0, 1);
    lcd.print(accessMessages[Access - 1]);  // Print access message
  } else {
    lcd.setCursor(0, 1);
    lcd.print("Access Denied");  // Print access denied message
  }

  Serial.println(Access);  // Print access status to serial monitor

  // Send access status to master Arduino via I2C
  Wire.beginTransmission(SLAVE_ADDR);
  Wire.write(Access);
  Wire.endTransmission();

  delay(1000);  // Wait for 1 second

  Access = 0;  // Reset access status
  Wire.beginTransmission(SLAVE_ADDR);
  Wire.write(Access);
  Wire.endTransmission();

  mfrc522.PICC_HaltA();  // Halt communication with the card
}
